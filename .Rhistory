shiny::runApp()
runApp()
runApp()
runApp()
require(stars)
sf_use_s2(FALSE)
focal = read_stars(file.choose(), proxy = TRUE)
st_crs(focal)
require(leaflet)
require(leafem)
focal = read_stars(file.choose(), proxy = TRUE)
focal = read_stars(file.choose(), proxy = FALSE)
leaflet() %>%
addStarsImage(focal,
leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addStarsImage(focal,
project = FALSE,
opacity = 0.70,
colors = sent_pal,
group = "Land use / Land cover")
###Sentinel LULC palette and classes
#####
sent_classes = tribble(
~ value,
~ class,
~ col,
1,
"Water",
"blue",
2,
"Trees",
"darkgreen",
4,
"Flooded vegetation",
"cyan",
5,
"Crops",
"yellow",
7,
"Built Area",
"red",
8,
"Bare ground",
"burlywood",
9,
"Snow/Ice",
"black",
10,
"Clouds",
"white",
11,
"Rangeland",
"greenyellow"
)
require(tidyverse)
###Sentinel LULC palette and classes
#####
sent_classes = tribble(
~ value,
~ class,
~ col,
1,
"Water",
"blue",
2,
"Trees",
"darkgreen",
4,
"Flooded vegetation",
"cyan",
5,
"Crops",
"yellow",
7,
"Built Area",
"red",
8,
"Bare ground",
"burlywood",
9,
"Snow/Ice",
"black",
10,
"Clouds",
"white",
11,
"Rangeland",
"greenyellow"
)
sent_pal <- colorFactor(palette = sent_classes$col,
na.color = NA,
sent_classes$value)
leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addStarsImage(focal,
project = FALSE,
opacity = 0.70,
colors = sent_pal,
group = "Land use / Land cover")
focal = read_stars(file.choose(), proxy = TRUE)
sf_use_s2(FALSE)
sent_full<-focal
#check size
size = prod(dim(sent_full)) / 1000000 #original size, in M pixels
if(size < 50){downsample_size = 3} else {
if(size > 50 &  size < 4000 ) {downsample_size = 10} else {
downsample_size = 20}
}
dim
sent_full
#read in canada boundary and change to 3857
can_bound = read_sf("Can_Bound/Can_bound.shp")
can_bound = st_transform(can_bound, crs = st_crs(3857))
setwd("C:/Users/DeyC/Desktop/To delete/Sent_Update_WIP - Copy")
#read in canada boundary and change to 3857
can_bound = read_sf("Can_Bound/Can_bound.shp")
can_bound = st_transform(can_bound, crs = st_crs(3857))
###land cover classes and colors for summary
###############
sent_classes = tribble(
~ value,
~ class,
~ col,
1,
"Water",
"blue",
2,
"Trees",
"darkgreen",
4,
"Flooded vegetation",
"lightgreen",
5,
"Crops",
"yellow",
7,
"Built Area",
"red",
8,
"Bare ground",
"burlywood",
9,
"Snow/Ice",
"black",
10,
"Clouds",
"grey",
11,
"Rangeland",
"green"
)
#check size
size = prod(dim(sent_full)) / 1000000 #original size, in M pixels
if(size < 50){downsample_size = 3} else {
if(size > 50 &  size < 4000 ) {downsample_size = 10} else {
downsample_size = 20}
}
#downsample
sent = st_downsample(sent_full, n=(downsample_size-1) )
message("Downsample complete")
st_crs(sent)
#clip
raster_bbox = st_bbox(sent)
can_local = st_crop(can_bound, raster_bbox)
sent = sent[can_local]
message("Clip to Canada boundary complete")
#create summary
x = layer_to_vector(sent)
require(starsExtra)
#create summary
x = layer_to_vector(sent)
sent_sum = tibble(value = as.numeric(x)) %>%
group_by(value) %>%
summarise(count = n()) %>%
filter(!is.na(value)) %>%
arrange(-count) %>%
mutate(prop = round(100*count / sum(count),2))
sent_sum = left_join(sent_sum, sent_classes, by = "value")
sent_sum
if(any(is.na(sent_sum$class))){
stop("Error in summary")}
csvout = "Sen_10TC_summary.csv"
write_csv(sent_sum, file = csvout)
message("Watershed Summary Export Done")
#write tif
###################
sent[[1]] = as.numeric(paste(sent[[1]])) #convert to numeric
tifout = "Sen_10TC_3857.tif"
write_stars(sent,
tifout,
layer = 1,
driver =  "GTiff",
options = c("COMPRESS=LZW", "TFW=YES")
)
message("Raster Export Done")
getwd()
###Sentinel LULC palette and classes
#####
sent_classes = tribble(
~ value,
~ class,
~ col,
1,
"Water",
"blue",
2,
"Trees",
"darkgreen",
4,
"Flooded vegetation",
"cyan",
5,
"Crops",
"yellow",
7,
"Built Area",
"red",
8,
"Bare ground",
"burlywood",
9,
"Snow/Ice",
"black",
10,
"Clouds",
"white",
11,
"Rangeland",
"greenyellow"
)
sent_pal <- colorFactor(palette = sent_classes$col,
na.color = NA,
sent_classes$value)
sent_sum = read_csv(file.choose())
sent_sum
LULC_statement = paste0(
"The predominant land cover classes are ",
paste0(sent_sum$class[1], " (", sent_sum$prop[1], "%), "),
paste0(sent_sum$class[2], " (", sent_sum$prop[2], "%), "),
paste0(sent_sum$class[3], " (", sent_sum$prop[3], "%) "), "and ",
paste0(sent_sum$class[4], " (", sent_sum$prop[4], "%). "))
LULC_statement
sent_raster = read_stars(file.choose(), proxy=FALSE)
leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addStarsImage(focal,
project = FALSE,
opacity = 0.70,
colors = sent_pal,
group = "Land use / Land cover")
leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addStarsImage(sent_raster,
project = FALSE,
opacity = 0.70,
colors = sent_pal,
group = "Land use / Land cover")
shiny::runApp()
shiny::runApp()
